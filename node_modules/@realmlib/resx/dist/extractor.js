"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const extractor_1 = require("../lib/extractor");
const name_map_1 = require("./name-map");
/**
 * A small wrapper over the rusted_realm `Extractor` class which maps the
 * results into a different format.
 *
 * NB: The rusted_realm `Extractor` is an unmanaged resource, and it is the
 * caller's responsibility to free the resources after it is done with them.
 */
class Extractor {
    constructor(swf) {
        this.extractor = new extractor_1.Extractor(swf);
    }
    /**
     * Releases the resources held by this extractor.
     */
    free() {
        this.extractor.free();
    }
    /**
     * Extracts the packets from the client and transforms
     * the result into a bi-directional map.
     */
    packets() {
        const mapping = this.extractor.mappings();
        const packets = {};
        // tslint:disable-next-line: forin
        for (const id in mapping.mappings) {
            const realName = name_map_1.NAME_MAP[mapping.mappings[id]];
            if (realName === undefined) {
                throw new Error(`Cannot map ${mapping.mappings[id]} to a packet type.`);
            }
            else {
                // add the property to the map.
                packets[realName] = parseInt(id, 10);
                // add the reverse property
                packets[id] = realName;
            }
        }
        return packets;
    }
    /**
     * Extracts the parameters from the client.
     */
    parameters() {
        return this.extractor.parameters();
    }
}
exports.Extractor = Extractor;
